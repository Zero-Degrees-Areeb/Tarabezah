// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tarabezah.Data.Context;

#nullable disable

namespace Tarabezah.Data.Migrations
{
    [DbContext(typeof(TarabezahDbContext))]
    [Migration("20250414191350_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tarabezah.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.smith@example.com",
                            Guid = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "John Smith",
                            Notes = "Prefers window seating",
                            PhoneNumber = "+1-555-123-4567",
                            Source = "Website",
                            Tags = "vip,wine lover"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1990, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sara.johnson@example.com",
                            Guid = new Guid("b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sara Johnson",
                            Notes = "Allergic to nuts",
                            PhoneNumber = "+1-555-987-6543",
                            Source = "Instagram",
                            Tags = "vegetarian,birthday"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1978, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "michael.chen@example.com",
                            Guid = new Guid("c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Michael Chen",
                            Notes = "Celebrates anniversary on September 22",
                            PhoneNumber = "+1-555-456-7890",
                            Source = "Facebook",
                            Tags = "bbq lover,regular"
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1992, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jennifer.garcia@example.com",
                            Guid = new Guid("d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Jennifer Garcia",
                            Notes = "Prefers quiet corner tables",
                            PhoneNumber = "+1-555-789-0123",
                            Source = "Referral",
                            Tags = "pescatarian,quiet table"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "robert.williams@example.com",
                            Guid = new Guid("e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Robert Williams",
                            Notes = "Frequently books for business meetings",
                            PhoneNumber = "+1-555-234-5678",
                            Source = "WalkIn",
                            Tags = "business,wine lover"
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorplanId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("MinCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FloorplanId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("CombinedTables", (string)null);
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTableMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CombinedTableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorplanElementInstanceId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FloorplanElementInstanceId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("CombinedTableId", "FloorplanElementInstanceId")
                        .IsUnique();

                    b.ToTable("CombinedTableMembers", (string)null);
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TableType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Elements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("f1e32900-5e22-4824-8adb-e1c50e976a23"),
                            ImageUrl = "/images/elements/round-table.png",
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Round Table",
                            Purpose = "Reservable",
                            TableType = "Round"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("28be68e2-a4d1-4a33-b0d6-f2d603fa0b41"),
                            ImageUrl = "/images/elements/square-table.png",
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Square Table",
                            Purpose = "Reservable",
                            TableType = "Square"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("a45c7f08-8b04-4d3e-8d23-f9e274a7c546"),
                            ImageUrl = "/images/elements/chair.png",
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Chair",
                            Purpose = "Decorative",
                            TableType = "Custom"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("e28b7af4-6f77-4a42-b4f6-29e7fd6ad0a9"),
                            ImageUrl = "/images/elements/wall.png",
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Wall",
                            Purpose = "Decorative",
                            TableType = "Custom"
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Floorplan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.ToTable("Floorplans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("d4f9a1b2-c03e-4f5a-8b67-9a0e7f2c3d45"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Main Floor",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("e5b0c1d2-a03f-4e5b-9c78-0b1f2d3e4a56"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Patio",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("f6c1d2e3-b04f-5e6c-0d89-1c2f3e4d5a67"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Dining Room",
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bar Area",
                            RestaurantId = 3
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.FloorplanElementInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("FloorplanId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MinCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rotation")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("FloorplanId", "TableId")
                        .IsUnique();

                    b.ToTable("FloorplanElements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 1,
                            FloorplanId = 1,
                            Guid = new Guid("b7c8d9e0-f1a2-3b4c-5d6e-7f8a9b0c1d2e"),
                            MaxCapacity = 4,
                            MinCapacity = 2,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 0,
                            TableId = "T1",
                            X = 100,
                            Y = 150
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 2,
                            FloorplanId = 1,
                            Guid = new Guid("c8d9e0f1-a2b3-4c5d-6e7f-8a9b0c1d2e3f"),
                            MaxCapacity = 6,
                            MinCapacity = 4,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 0,
                            TableId = "T2",
                            X = 250,
                            Y = 150
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 4,
                            FloorplanId = 1,
                            Guid = new Guid("d9e0f1a2-b3c4-5d6e-7f8a-9b0c1d2e3f4a"),
                            MaxCapacity = 0,
                            MinCapacity = 0,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 90,
                            TableId = "W1",
                            X = 50,
                            Y = 50
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 1,
                            FloorplanId = 2,
                            Guid = new Guid("e0f1a2b3-c4d5-6e7f-8a9b-0c1d2e3f4a5b"),
                            MaxCapacity = 4,
                            MinCapacity = 2,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 0,
                            TableId = "P1",
                            X = 100,
                            Y = 100
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 2,
                            FloorplanId = 3,
                            Guid = new Guid("f1a2b3c4-d5e6-7f8a-9b0c-1d2e3f4a5b6c"),
                            MaxCapacity = 8,
                            MinCapacity = 4,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 45,
                            TableId = "D1",
                            X = 150,
                            Y = 200
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ElementId = 1,
                            FloorplanId = 4,
                            Guid = new Guid("a2b3c4d5-e6f7-8a9b-0c1d-2e3f4a5b6c7d"),
                            MaxCapacity = 2,
                            MinCapacity = 2,
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Rotation = 0,
                            TableId = "B1",
                            X = 75,
                            Y = 125
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CombinedTableMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedElementId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CombinedTableMemberId");

                    b.HasIndex("Date");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("ReservedElementId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Celebrating wedding anniversary",
                            PartySize = 2,
                            ShiftId = 3,
                            Tags = "anniversary,window seat",
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("a7b8c9d0-e1f2-3a4b-5c6d-7e8f9a0b1c2d"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Birthday celebration - bringing own cake",
                            PartySize = 4,
                            ShiftId = 2,
                            Tags = "birthday,cake",
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("b8c9d0e1-f2a3-4b5c-6d7e-8f9a0b1c2d3e"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Family gathering, requests BBQ specials",
                            PartySize = 6,
                            ShiftId = 3,
                            Tags = "family,bbq",
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("c9d0e1f2-a3b4-5c6d-7e8f-9a0b1c2d3e4f"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Pescatarian menu options requested",
                            PartySize = 2,
                            ShiftId = 2,
                            Tags = "quiet corner,pescatarian",
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("d0e1f2a3-b4c5-6d7e-8f9a-0b1c2d3e4f5a"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Business dinner, wine pairing recommended",
                            PartySize = 8,
                            ShiftId = 3,
                            Tags = "business,wine pairing",
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("e1f2a3b4-c5d6-7e8f-9a0b-1c2d3e4f5a6b"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Business lunch, time-constrained",
                            PartySize = 4,
                            ShiftId = 2,
                            Tags = "business,quick service",
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Type = 0
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Restaurants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("a7fa1095-d8c5-4d00-8a44-7ba684eae835"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Italian Bistro"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("b2e7c6f0-d98c-4e5d-9a83-bc9429ab4187"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Seaside Grill"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("c3d8e9f2-a04b-4c1e-8a75-1d0e7f35b281"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Downtown Cafe"
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.RestaurantShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("ShiftId");

                    b.HasIndex("RestaurantId", "ShiftId")
                        .IsUnique();

                    b.ToTable("RestaurantShifts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantId = 1,
                            ShiftId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantId = 1,
                            ShiftId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantId = 1,
                            ShiftId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantId = 2,
                            ShiftId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Guid = new Guid("e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RestaurantId = 2,
                            ShiftId = 3
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Shifts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            Guid = new Guid("d1e23f45-6789-4a0b-b1c2-d3e4f5a6b7c8"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Breakfast",
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            Guid = new Guid("e2f34a56-789b-4c0d-e1f2-a3b4c5d6e7f8"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Lunch",
                            StartTime = new TimeSpan(0, 11, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 23, 0, 0, 0),
                            Guid = new Guid("f3a45b67-8c9d-4e0f-a1b2-c3d4e5f6a7b8"),
                            ModifiedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Dinner",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTable", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.Floorplan", "Floorplan")
                        .WithMany("CombinedTables")
                        .HasForeignKey("FloorplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floorplan");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTableMember", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.CombinedTable", "CombinedTable")
                        .WithMany("Members")
                        .HasForeignKey("CombinedTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tarabezah.Domain.Entities.FloorplanElementInstance", "FloorplanElementInstance")
                        .WithMany("CombinedTableMemberships")
                        .HasForeignKey("FloorplanElementInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CombinedTable");

                    b.Navigation("FloorplanElementInstance");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Floorplan", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Floorplans")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.FloorplanElementInstance", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.Element", "Element")
                        .WithMany("UsedIn")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tarabezah.Domain.Entities.Floorplan", "Floorplan")
                        .WithMany("Elements")
                        .HasForeignKey("FloorplanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Floorplan");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tarabezah.Domain.Entities.CombinedTableMember", "CombinedTableMember")
                        .WithMany("Reservations")
                        .HasForeignKey("CombinedTableMemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tarabezah.Domain.Entities.FloorplanElementInstance", "ReservedElement")
                        .WithMany()
                        .HasForeignKey("ReservedElementId");

                    b.HasOne("Tarabezah.Domain.Entities.Shift", "Shift")
                        .WithMany("Reservations")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CombinedTableMember");

                    b.Navigation("ReservedElement");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.RestaurantShift", b =>
                {
                    b.HasOne("Tarabezah.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantShifts")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tarabezah.Domain.Entities.Shift", "Shift")
                        .WithMany("RestaurantShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTable", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.CombinedTableMember", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Element", b =>
                {
                    b.Navigation("UsedIn");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Floorplan", b =>
                {
                    b.Navigation("CombinedTables");

                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.FloorplanElementInstance", b =>
                {
                    b.Navigation("CombinedTableMemberships");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Floorplans");

                    b.Navigation("RestaurantShifts");
                });

            modelBuilder.Entity("Tarabezah.Domain.Entities.Shift", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RestaurantShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
